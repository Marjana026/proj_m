@page
@model IndexModel
@{
    ViewData["Title"] = "Blog Posts";
}

<h2>Blog Posts</h2>
@if (Model.Posts != null)
{
    <div>Loaded @Model.Posts.Count posts</div>
}
<table>
    <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Category</th>
            <th>Published</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var post in Model.Posts)
    {
        <tr>
            <td>@post.Title</td>
            <td>@post.Author</td>
            <td>@post.Category?.Name</td>
            <td>@post.PublishedDate.ToShortDateString()</td>
            <td>
                <a asp-page="/Edit" asp-route-id="@post.Id">Edit</a> |
                <a asp-page="/Delete" asp-route-id="@post.Id">Delete</a>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    using Microsoft.AspNetCore.Mvc.RazorPages;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.Logging;
    using SyncSyntax.Data;
    using SyncSyntax.Models;
    using System.Collections.Generic;
    using System.Linq;
    using System.Diagnostics;

    public class IndexModel : PageModel
    {
        private readonly AppDbContext _context;
        private readonly ILogger<IndexModel> _logger;

        public IndexModel(AppDbContext context, ILogger<IndexModel> logger)
        {
            _context = context;
            _logger = logger;
        }

        public List<Post> Posts { get; set; }

        public void OnGet()
        {
            _logger.LogDebug("OnGet called in IndexModel");
            Posts = _context.Posts
                .Include(p => p.Category)
                .OrderByDescending(p => p.PublishedDate)
                .ToList();
            _logger.LogDebug("Loaded {Count} posts", Posts.Count);
            Debug.WriteLine($"Loaded {Posts.Count} posts in IndexModel");
        }
    }
}
